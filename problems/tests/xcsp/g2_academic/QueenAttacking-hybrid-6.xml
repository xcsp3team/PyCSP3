<instance format="XCSP3" type="COP">
  <variables>
    <var id="q" note="q is the cell for the queen"> 0..35 </var>
    <array id="x" note="x[i] is the cell for the i+1th value" size="[36]"> 0..35 </array>
    <array id="aux_gb" note="aux_gb[i] is the ith auxiliary variable having been automatically introduced" size="[70]"> 0..5 </array>
  </variables>
  <constraints>
    <allDifferent note="all values are put in different cells"> x[] </allDifferent>
    <group note="ensuring a knight move between two successive values">
      <extension>
        <list> %0 %1 </list>
        <supports> (1,2)(2,1) </supports>
      </extension>
      <args> aux_gb[0] aux_gb[1] </args>
      <args> aux_gb[2] aux_gb[3] </args>
      <args> aux_gb[4] aux_gb[5] </args>
      <args> aux_gb[6] aux_gb[7] </args>
      <args> aux_gb[8] aux_gb[9] </args>
      <args> aux_gb[10] aux_gb[11] </args>
      <args> aux_gb[12] aux_gb[13] </args>
      <args> aux_gb[14] aux_gb[15] </args>
      <args> aux_gb[16] aux_gb[17] </args>
      <args> aux_gb[18] aux_gb[19] </args>
      <args> aux_gb[20] aux_gb[21] </args>
      <args> aux_gb[22] aux_gb[23] </args>
      <args> aux_gb[24] aux_gb[25] </args>
      <args> aux_gb[26] aux_gb[27] </args>
      <args> aux_gb[28] aux_gb[29] </args>
      <args> aux_gb[30] aux_gb[31] </args>
      <args> aux_gb[32] aux_gb[33] </args>
      <args> aux_gb[34] aux_gb[35] </args>
      <args> aux_gb[36] aux_gb[37] </args>
      <args> aux_gb[38] aux_gb[39] </args>
      <args> aux_gb[40] aux_gb[41] </args>
      <args> aux_gb[42] aux_gb[43] </args>
      <args> aux_gb[44] aux_gb[45] </args>
      <args> aux_gb[46] aux_gb[47] </args>
      <args> aux_gb[48] aux_gb[49] </args>
      <args> aux_gb[50] aux_gb[51] </args>
      <args> aux_gb[52] aux_gb[53] </args>
      <args> aux_gb[54] aux_gb[55] </args>
      <args> aux_gb[56] aux_gb[57] </args>
      <args> aux_gb[58] aux_gb[59] </args>
      <args> aux_gb[60] aux_gb[61] </args>
      <args> aux_gb[62] aux_gb[63] </args>
      <args> aux_gb[64] aux_gb[65] </args>
      <args> aux_gb[66] aux_gb[67] </args>
      <args> aux_gb[68] aux_gb[69] </args>
    </group>
    <group>
      <intension> eq(dist(div(%0,6),div(%1,6)),%2) </intension>
      <args> x[0] x[1] aux_gb[0] </args>
      <args> x[1] x[2] aux_gb[2] </args>
      <args> x[2] x[3] aux_gb[4] </args>
      <args> x[3] x[4] aux_gb[6] </args>
      <args> x[4] x[5] aux_gb[8] </args>
      <args> x[5] x[6] aux_gb[10] </args>
      <args> x[6] x[7] aux_gb[12] </args>
      <args> x[7] x[8] aux_gb[14] </args>
      <args> x[8] x[9] aux_gb[16] </args>
      <args> x[9] x[10] aux_gb[18] </args>
      <args> x[10] x[11] aux_gb[20] </args>
      <args> x[11] x[12] aux_gb[22] </args>
      <args> x[12] x[13] aux_gb[24] </args>
      <args> x[13] x[14] aux_gb[26] </args>
      <args> x[14] x[15] aux_gb[28] </args>
      <args> x[15] x[16] aux_gb[30] </args>
      <args> x[16] x[17] aux_gb[32] </args>
      <args> x[17] x[18] aux_gb[34] </args>
      <args> x[18] x[19] aux_gb[36] </args>
      <args> x[19] x[20] aux_gb[38] </args>
      <args> x[20] x[21] aux_gb[40] </args>
      <args> x[21] x[22] aux_gb[42] </args>
      <args> x[22] x[23] aux_gb[44] </args>
      <args> x[23] x[24] aux_gb[46] </args>
      <args> x[24] x[25] aux_gb[48] </args>
      <args> x[25] x[26] aux_gb[50] </args>
      <args> x[26] x[27] aux_gb[52] </args>
      <args> x[27] x[28] aux_gb[54] </args>
      <args> x[28] x[29] aux_gb[56] </args>
      <args> x[29] x[30] aux_gb[58] </args>
      <args> x[30] x[31] aux_gb[60] </args>
      <args> x[31] x[32] aux_gb[62] </args>
      <args> x[32] x[33] aux_gb[64] </args>
      <args> x[33] x[34] aux_gb[66] </args>
      <args> x[34] x[35] aux_gb[68] </args>
    </group>
    <group>
      <intension> eq(dist(mod(%0,6),mod(%1,6)),%2) </intension>
      <args> x[0] x[1] aux_gb[1] </args>
      <args> x[1] x[2] aux_gb[3] </args>
      <args> x[2] x[3] aux_gb[5] </args>
      <args> x[3] x[4] aux_gb[7] </args>
      <args> x[4] x[5] aux_gb[9] </args>
      <args> x[5] x[6] aux_gb[11] </args>
      <args> x[6] x[7] aux_gb[13] </args>
      <args> x[7] x[8] aux_gb[15] </args>
      <args> x[8] x[9] aux_gb[17] </args>
      <args> x[9] x[10] aux_gb[19] </args>
      <args> x[10] x[11] aux_gb[21] </args>
      <args> x[11] x[12] aux_gb[23] </args>
      <args> x[12] x[13] aux_gb[25] </args>
      <args> x[13] x[14] aux_gb[27] </args>
      <args> x[14] x[15] aux_gb[29] </args>
      <args> x[15] x[16] aux_gb[31] </args>
      <args> x[16] x[17] aux_gb[33] </args>
      <args> x[17] x[18] aux_gb[35] </args>
      <args> x[18] x[19] aux_gb[37] </args>
      <args> x[19] x[20] aux_gb[39] </args>
      <args> x[20] x[21] aux_gb[41] </args>
      <args> x[21] x[22] aux_gb[43] </args>
      <args> x[22] x[23] aux_gb[45] </args>
      <args> x[23] x[24] aux_gb[47] </args>
      <args> x[24] x[25] aux_gb[49] </args>
      <args> x[25] x[26] aux_gb[51] </args>
      <args> x[26] x[27] aux_gb[53] </args>
      <args> x[27] x[28] aux_gb[55] </args>
      <args> x[28] x[29] aux_gb[57] </args>
      <args> x[29] x[30] aux_gb[59] </args>
      <args> x[30] x[31] aux_gb[61] </args>
      <args> x[31] x[32] aux_gb[63] </args>
      <args> x[32] x[33] aux_gb[65] </args>
      <args> x[33] x[34] aux_gb[67] </args>
      <args> x[34] x[35] aux_gb[69] </args>
    </group>
  </constraints>
  <objectives>
    <minimize note="minimizing the number of free primes" type="sum"> or(eq(q,x[1]),and(ne(div(q,6),div(x[1],6)),ne(mod(q,6),mod(x[1],6)),ne(dist(div(q,6),div(x[1],6)),dist(mod(q,6),mod(x[1],6))))) or(eq(q,x[2]),and(ne(div(q,6),div(x[2],6)),ne(mod(q,6),mod(x[2],6)),ne(dist(div(q,6),div(x[2],6)),dist(mod(q,6),mod(x[2],6))))) or(eq(q,x[4]),and(ne(div(q,6),div(x[4],6)),ne(mod(q,6),mod(x[4],6)),ne(dist(div(q,6),div(x[4],6)),dist(mod(q,6),mod(x[4],6))))) or(eq(q,x[6]),and(ne(div(q,6),div(x[6],6)),ne(mod(q,6),mod(x[6],6)),ne(dist(div(q,6),div(x[6],6)),dist(mod(q,6),mod(x[6],6))))) or(eq(q,x[10]),and(ne(div(q,6),div(x[10],6)),ne(mod(q,6),mod(x[10],6)),ne(dist(div(q,6),div(x[10],6)),dist(mod(q,6),mod(x[10],6))))) or(eq(q,x[12]),and(ne(div(q,6),div(x[12],6)),ne(mod(q,6),mod(x[12],6)),ne(dist(div(q,6),div(x[12],6)),dist(mod(q,6),mod(x[12],6))))) or(eq(q,x[16]),and(ne(div(q,6),div(x[16],6)),ne(mod(q,6),mod(x[16],6)),ne(dist(div(q,6),div(x[16],6)),dist(mod(q,6),mod(x[16],6))))) or(eq(q,x[18]),and(ne(div(q,6),div(x[18],6)),ne(mod(q,6),mod(x[18],6)),ne(dist(div(q,6),div(x[18],6)),dist(mod(q,6),mod(x[18],6))))) or(eq(q,x[22]),and(ne(div(q,6),div(x[22],6)),ne(mod(q,6),mod(x[22],6)),ne(dist(div(q,6),div(x[22],6)),dist(mod(q,6),mod(x[22],6))))) or(eq(q,x[28]),and(ne(div(q,6),div(x[28],6)),ne(mod(q,6),mod(x[28],6)),ne(dist(div(q,6),div(x[28],6)),dist(mod(q,6),mod(x[28],6))))) or(eq(q,x[30]),and(ne(div(q,6),div(x[30],6)),ne(mod(q,6),mod(x[30],6)),ne(dist(div(q,6),div(x[30],6)),dist(mod(q,6),mod(x[30],6))))) </minimize>
  </objectives>
</instance>
